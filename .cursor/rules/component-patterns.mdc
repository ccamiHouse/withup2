---
globs: src/components/**/*.js
description: React 컴포넌트 개발 패턴 및 스타일 가이드
---

# React 컴포넌트 개발 패턴

## 컴포넌트 구조

```javascript
"use client"; // 클라이언트 컴포넌트인 경우에만

import React, { useState, useEffect } from "react";
import Link from "next/link";

export default function ComponentName({ prop1, prop2 }) {
  // 상태 관리
  const [state, setState] = useState(initialValue);

  // 이벤트 핸들러
  const handleEvent = () => {
    // 이벤트 처리 로직
  };

  return <div className="component-wrapper">{/* JSX 내용 */}</div>;
}
```

## 스타일링 규칙

- **Tailwind CSS 우선 사용**: 인라인 클래스로 스타일링
- **반응형 디자인**: `md:`, `lg:` 등 브레이크포인트 활용
- **색상 팔레트**: primary 색상 계열 사용 (blue-600 등)
- **일관된 간격**: `p-4`, `m-2`, `space-y-4` 등 표준 간격 사용

## 컴포넌트 예시

기존 컴포넌트들을 참고하세요:

- [Header.js](mdc:src/components/Header.js) - 네비게이션 컴포넌트
- [StudyCard.js](mdc:src/components/StudyCard.js) - 카드형 컴포넌트
- [Footer.js](mdc:src/components/Footer.js) - 푸터 컴포넌트

## Props 패턴

```javascript
// 객체 구조분해 할당 사용
export default function StudyCard({ study }) {
  const { id, title, description, category } = study;
  // ...
}

// 기본값 설정
export default function Component({ title = '기본 제목' }) {
  // ...
}
```

## 상태 관리

- **로컬 상태**: `useState` 사용
- **전역 상태**: 필요시 Context API 또는 외부 라이브러리
- **서버 상태**: 추후 React Query 등 도입 고려

## 이벤트 핸들링

- **함수명**: `handle` 접두사 사용 (예: `handleClick`, `handleSubmit`)
- **인라인 함수 지양**: 컴포넌트 내부에서 함수 정의
- **이벤트 객체**: 필요시 매개변수로 전달

## 접근성 고려사항

- **시맨틱 HTML**: `<button>`, `<nav>`, `<main>` 등 적절한 태그 사용
- **키보드 네비게이션**: `tabIndex`, `onKeyDown` 등 고려
- **스크린 리더**: `aria-label`, `aria-describedby` 등 속성 활용
