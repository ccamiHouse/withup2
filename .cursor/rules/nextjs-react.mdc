---
globs: *.js,*.jsx
---
# Next.js & React 개발 가이드

## Next.js App Router 규칙
이 프로젝트는 Next.js 15 App Router를 사용합니다.

### 페이지 구조
- `page.js` - 라우트의 UI 정의
- `layout.js` - 여러 페이지에서 공유되는 UI
- `loading.js` - 로딩 상태 UI (필요시)
- `error.js` - 에러 처리 UI (필요시)
- `not-found.js` - 404 페이지 (필요시)

### 동적 라우팅
- `[id]/page.js` - 동적 세그먼트 (예: `/studies/[id]`)
- params를 props로 받아 처리

### 메타데이터
루트 레이아웃의 메타데이터 패턴을 따르세요:
```javascript
export const metadata = {
  title: 'WithUp - 스터디 모임 플랫폼',
  description: '원하는 스터디 모임을 쉽게 개설하고 참여하세요',
};
```

## React 컴포넌트 패턴

### 서버 컴포넌트 vs 클라이언트 컴포넌트
- **기본값**: 서버 컴포넌트 (더 빠르고 SEO 친화적)
- **클라이언트 컴포넌트**: 상호작용(state, hooks, 이벤트 핸들러) 필요시 `'use client'` 선언
  - 예: [Header.js](mdc:src/components/Header.js) - useState 사용

### 함수형 컴포넌트
항상 함수형 컴포넌트와 React Hooks를 사용하세요.

```javascript
// 서버 컴포넌트 (기본)
export default function StudyCard({ study }) {
  return <div>...</div>;
}

// 클라이언트 컴포넌트 (상호작용 필요시)
'use client';

import { useState } from 'react';

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  return <header>...</header>;
}
```

### Props 구조 분해
props는 명확하게 구조 분해하여 사용하세요:
```javascript
export default function StudyCard({ study }) {
  const { id, title, description, category, location } = study;
  // ...
}
```

### 컴포넌트 구성
1. **Import 문** - React, Next.js, 외부 라이브러리, 로컬 컴포넌트 순
2. **타입/상수** (필요시)
3. **컴포넌트 정의**
4. **Hooks** (useState, useEffect 등)
5. **이벤트 핸들러**
6. **렌더링 로직**
7. **Export**

### Next.js Link 사용
내부 링크는 반드시 `next/link`의 `<Link>` 컴포넌트를 사용하세요:
```javascript
import Link from 'next/link';

<Link href="/studies">스터디 찾기</Link>
```

### 이미지 최적화
이미지는 `next/image`의 `<Image>` 컴포넌트 사용을 권장합니다:
```javascript
import Image from 'next/image';

<Image src="/logo.png" alt="WithUp" width={200} height={50} />
```

## 상태 관리
- **로컬 상태**: useState
- **서버 상태**: React Server Components (기본)
- **전역 상태**: Context API 또는 상태 관리 라이브러리 (필요시 추가)

## 에러 처리
```javascript
// 클라이언트 컴포넌트
try {
  // API 호출
} catch (error) {
  console.error('Error:', error);
  // 사용자에게 에러 메시지 표시
}
```

## 성능 최적화
- 큰 컴포넌트는 동적 임포트 사용: `const Component = dynamic(() => import('./Component'))`
- 불필요한 리렌더링 방지: `useMemo`, `useCallback` 활용
- 서버 컴포넌트 우선 사용으로 클라이언트 번들 크기 최소화

## 참고 파일
- 레이아웃: [layout.js](mdc:src/app/layout.js)
- 클라이언트 컴포넌트 예시: [Header.js](mdc:src/components/Header.js)
- 서버 컴포넌트 예시: [StudyCard.js](mdc:src/components/StudyCard.js)
