---
description: 성능 최적화 및 모범 사례 가이드
---

# 성능 최적화 가이드

## Next.js 최적화

### 이미지 최적화

```javascript
import Image from "next/image";

// Next.js Image 컴포넌트 사용
<Image
  src="/images/study-image.jpg"
  alt="스터디 이미지"
  width={300}
  height={200}
  priority={false} // 중요한 이미지만 true
  placeholder="blur" // 블러 플레이스홀더
/>;
```

### 동적 임포트

```javascript
import dynamic from "next/dynamic";

// 클라이언트 컴포넌트 지연 로딩
const StudyChart = dynamic(() => import("@/components/StudyChart"), {
  loading: () => <div>차트 로딩 중...</div>,
  ssr: false, // 서버사이드 렌더링 비활성화
});
```

### 메타데이터 최적화

```javascript
export const metadata = {
  title: "스터디 찾기 - WithUp",
  description: "원하는 스터디를 찾아보세요",
  robots: "index, follow", // SEO 최적화
  openGraph: {
    title: "WithUp - 스터디 모임 플랫폼",
    description: "스터디를 찾고 참여하세요",
    images: ["/images/og-image.jpg"],
  },
};
```

## React 최적화

### 메모이제이션

```javascript
import { memo, useMemo, useCallback } from "react";

// 컴포넌트 메모이제이션
const StudyCard = memo(({ study }) => {
  // 복잡한 계산 메모이제이션
  const progressPercentage = useMemo(() => {
    return (study.currentMembers / study.maxMembers) * 100;
  }, [study.currentMembers, study.maxMembers]);

  // 함수 메모이제이션
  const handleClick = useCallback(() => {
    // 클릭 처리 로직
  }, []);

  return <div>...</div>;
});
```

### 가상화 (대량 데이터)

```javascript
// 많은 스터디 목록이 있을 때
import { FixedSizeList as List } from "react-window";

const StudyList = ({ studies }) => (
  <List
    height={600}
    itemCount={studies.length}
    itemSize={200}
    itemData={studies}
  >
    {StudyRow}
  </List>
);
```

### 조건부 렌더링 최적화

```javascript
// 좋은 예: 조건을 컴포넌트 외부에서 계산
const StudyCard = ({ study }) => {
  const isOnline = study.isOnline;
  const isFull = study.currentMembers >= study.maxMembers;

  return (
    <div>
      {isOnline && <OnlineBadge />}
      {isFull && <FullBadge />}
    </div>
  );
};

// 피해야 할 예: 매번 계산
const StudyCard = ({ study }) => (
  <div>
    {study.isOnline && <OnlineBadge />}
    {study.currentMembers >= study.maxMembers && <FullBadge />}
  </div>
);
```

## CSS 최적화

### Tailwind CSS 최적화

```javascript
// 불필요한 클래스 제거
// 나쁜 예
<div className="p-4 m-2 bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300">

// 좋은 예: 공통 스타일을 컴포넌트로 분리
<div className="card-container">
```

### CSS-in-JS 최적화

```javascript
// styled-components 사용 시
const StyledCard = styled.div`
  padding: 1rem;
  margin: 0.5rem;
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

  &:hover {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
`;
```

## 데이터 페칭 최적화

### 서버 컴포넌트 활용

```javascript
// 서버에서 데이터 페칭
async function StudyList() {
  const studies = await fetchStudies();

  return (
    <div>
      {studies.map((study) => (
        <StudyCard key={study.id} study={study} />
      ))}
    </div>
  );
}
```

### 캐싱 전략

```javascript
// Next.js 캐싱
const studies = await fetch("/api/studies", {
  next: { revalidate: 60 }, // 60초마다 재검증
});

// 클라이언트 사이드 캐싱 (추후 도입)
import useSWR from "swr";

const { data: studies, error } = useSWR("/api/studies", fetcher);
```

## 번들 크기 최적화

### 불필요한 라이브러리 제거

```javascript
// 필요한 부분만 임포트
import { debounce } from "lodash/debounce";
// 대신 전체 lodash 임포트 지양
// import _ from 'lodash';
```

### 코드 스플리팅

```javascript
// 라우트별 코드 스플리팅 (Next.js 자동)
// 페이지별로 자동 분할됨

// 컴포넌트별 수동 스플리팅
const StudyDetail = lazy(() => import("@/components/StudyDetail"));
```

## 모바일 최적화

### 터치 최적화

```css
/* 터치 타겟 최소 크기 */
.touch-target {
  min-height: 44px;
  min-width: 44px;
}

/* 터치 피드백 */
.button {
  transition: transform 0.1s ease;
}

.button:active {
  transform: scale(0.95);
}
```

### 네트워크 최적화

```javascript
// 이미지 지연 로딩
<img
  src="image.jpg"
  loading="lazy"
  alt="설명"
/>

// 중요하지 않은 스크립트 지연 로딩
<script src="analytics.js" defer></script>
```

## 모니터링

### 성능 측정

```javascript
// Web Vitals 측정
import { getCLS, getFID, getFCP, getLCP, getTTFB } from "web-vitals";

getCLS(console.log);
getFID(console.log);
getFCP(console.log);
getLCP(console.log);
getTTFB(console.log);
```

### 에러 추적

```javascript
// 에러 바운더리
class ErrorBoundary extends React.Component {
  componentDidCatch(error, errorInfo) {
    console.error("Error caught:", error, errorInfo);
    // 에러 추적 서비스로 전송
  }
}
```

## 성능 체크리스트

### 개발 시 확인사항

- [ ] 이미지 최적화 적용
- [ ] 불필요한 리렌더링 방지
- [ ] 번들 크기 모니터링
- [ ] 모바일 성능 테스트
- [ ] 접근성 검사
- [ ] SEO 최적화
- [ ] 에러 처리 구현
- [ ] 로딩 상태 표시
